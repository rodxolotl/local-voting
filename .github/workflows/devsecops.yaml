name: DevSecOps Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  secrets-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Gitleaks
        run: |
          curl -L https://github.com/gitleaks/gitleaks/releases/download/v8.21.2/gitleaks_8.21.2_linux_x64.tar.gz -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz gitleaks
          chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/

      - name: Run Gitleaks
        run: |
          mkdir -p reports
          gitleaks detect --source . --report-format json --report-path reports/gitleaks-report.json || true


  sca-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          sudo mv ./bin/trivy /usr/local/bin/trivy

      - name: Install Project Dependencies
        run: |
          cd result && npm install
          cd ../vote && pip install -r requirements.txt --no-cache-dir
          npm audit fix || true
          pip check || true

      - name: Scan Dependencies
        run: trivy fs --scanners vuln . -q -o reports/trivy-report.txt || true


  sast-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Semgrep
        run: |
          pip install --upgrade pip
          pip install semgrep==1.97.0

      - name: Run Semgrep Analysis
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        run: |
          mkdir -p reports
          semgrep --config auto --exclude-dir node_modules --exclude-dir .git --timeout 300 --json --output reports/semgrep-report.json || true

      - name: Display Semgrep Report Path
        run: |
          echo "Semgrep report generated at: $(pwd)/reports/semgrep-report.json"


  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy with Docker Compose to Local
        run: |
          echo "Deploying with Docker Compose on Local Machine..."
          docker compose -f docker-compose.images.yml down
          docker compose -f docker-compose.images.yml up -d --remove-orphans

  dast-analysis:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Install Nikto
        run: |
          echo "Installing Nikto..."
          sudo apt-get update
          sudo apt-get install -y nikto

      - name: Run Nikto DAST Analysis
        run: |
          echo "Running Nikto DAST Analysis..."
          mkdir -p reports
          nikto -h http://localhost:8080 -output reports/nikto-report-8080.html || true
          nikto -h http://localhost:8081 -output reports/nikto-report-8081.html || true

      - name: Display Report Path
        run: |
          echo "Nikto report generated at: $(pwd)/reports/nikto-report.html"
